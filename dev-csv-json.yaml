trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

parameters:
- name: DEV_CLIENT_NAME
  displayName: 'Dev Client Name'
  type: string
  default: 'demo1'
  values:
  - demo1
  - demo2
  - All
- name: CLIENT_NAME
  displayName: 'QA Client Name'
  type: string
  default: 'demo1'
  values:
  - demo1
  - demo2
  - darin
  - john
  - jane
  - bob
  - All

stages:
- stage: Build
  displayName: 'Build'
  jobs:
  - job: Build
    displayName: 'Building the code'
    steps:
    - script: |
        zip svc.csv.json.zip lambda_function.py
        echo "hello world"
      displayName: 'Build'

- stage: Deploy_to_DEV
  displayName: 'Deploy to DEV'
  dependsOn: Build
  jobs:
  - job: Deploy_to_DEV
    displayName: 'Deploying in DEV'
    condition: ne(variables['CLIENT_NAME'], 'All')  # Check if CLIENT_NAME is not 'All'
    steps:
    - script: |
        aws s3 cp svc.csv.json.zip s3://code-deployment-package-3a/dev/etl-code/svc.csv.json.${{ variables.BUILD_BUILDID }}.zip
        aws lambda update-function-code --function-name dev-irn-${{ parameters.CLIENT_NAME }}-csv-json --s3-bucket code-deployment-package-3a --s3-key dev/etl-code/svc.csv.json.${{ variables.BUILD_BUILDID }}.zip --architecture x86_64 --region us-east-1
        sleep 10s
        aws lambda publish-version --function-name dev-irn-${{ parameters.CLIENT_NAME }}-csv-json --region us-east-1
        def latest_version = $(aws lambda list-versions-by-function --region us-east-1 --no-paginate --function-name dev-irn-${{ parameters.CLIENT_NAME }}-csv-json --query "Versions[-1].Version" --output text)
        def older_version = $(aws lambda list-versions-by-function --region us-east-1 --no-paginate --function-name dev-irn-${{ parameters.CLIENT_NAME }}-csv-json --query "Versions[-2].Version" --output text)
        aws lambda update-alias --name dev-irn-${{ parameters.CLIENT_NAME }}-csv-json-alias --function-name dev-irn-${{ parameters.CLIENT_NAME }}-csv-json --function-version $older_version --routing-config AdditionalVersionWeights={"$latest_version"="$env:traffic_weight"}
      displayName: 'Deploy to DEV'

  - job: Deploy_to_ALL_DEV
    displayName: 'Deploying to all DEV'
    condition: eq(variables['CLIENT_NAME'], 'All')  # Check if CLIENT_NAME is 'All'
    steps:
    - script: |
        # Script for deploying to all DEV environments
      displayName: 'Deploy to all DEV'
