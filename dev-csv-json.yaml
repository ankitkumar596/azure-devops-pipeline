trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

parameters:
- name: DEPLOY_DEV
  displayName: 'Deploy to Dev? (YES/NO)'
  type: string
  default: 'NO'
  values:
  - YES
  - NO

- name: DEV_CLIENT_NAME
  displayName: 'DEV Client Name'
  type: string
  default: 'demo1'
  values:
  - demo1
  - demo2
  - All

- name: DEPLOY_PROD
  displayName: 'Deploy to PROD? (YES/NO)'
  type: string
  default: 'NO'
  values:
  - YES
  - NO
  
- name: QA_CLIENT_NAME
  displayName: 'QA Client Name'
  type: string
  default: 'demo1'
  values:
  - demo1
  - demo2
  - darin
  - john
  - jane
  - bob
  - All



stages:
- stage: Build
  displayName: 'Build'
  jobs:
  - job: Build
    displayName: 'Building the code'
    steps:
    - script: |
        zip svc.csv.json.zip lambda_function.py
        echo "hello world"
      displayName: 'Build'

- stage: Deploy_to_DEV
  displayName: 'Deploy to DEV'
  dependsOn: Build
  condition: and(eq('${{ parameters.DEPLOY_DEV }}', 'YES'), ne('${{ parameters.DEV_CLIENT_NAME }}', 'All'))
  jobs:
  - job: Deploy_to_DEV
    displayName: 'Deploying in DEV'
    steps:
    - script: |
        aws s3 cp svc.csv.json.zip s3://code-deployment-package-3a/dev/etl-code/svc.csv.json.${{ variables.BUILD_BUILDID }}.zip
        aws lambda update-function-code --function-name dev-irn-${{ parameters.DEV_CLIENT_NAME }}-csv-json --s3-bucket code-deployment-package-3a --s3-key dev/etl-code/svc.csv.json.${{ variables.BUILD_BUILDID }}.zip --publish --region us-east-1
      displayName: 'Deploy to DEV'

  - job: Deploy_to_ALL_DEV
    displayName: 'Deploying to all DEV'
    condition: and(eq('${{ parameters.DEPLOY_DEV }}', 'YES'), eq('${{ parameters.DEV_CLIENT_NAME }}', 'All'))
    steps:
    - script: |
        aws s3 cp svc.csv.json.zip s3://code-deployment-package-3a/dev/etl-code/svc.csv.json.${{ variables.BUILD_BUILDID }}.zip
        function_names=$(aws lambda list-functions --query 'Functions[*].FunctionName' --output text)
        for function_name in $function_names; do
          echo "Updating code for Lambda function: $function_name"
          aws lambda update-function-code --function-name "$function_name" --zip-file fileb://svc.csv.json.zip --publish --region us-east-1
        done
      displayName: 'Deploy to all DEV'

- stage: Deploy_to_QA
  displayName: 'Deploy to QA'
  dependsOn: Build
  condition: and(eq('${{ parameters.DEPLOY_PROD }}', 'YES'), ne('${{ parameters.QA_CLIENT_NAME }}', 'All'))
  jobs:
  - job: Deploy_to_QA
    displayName: 'Deploying in QA'
    steps:
    - script: |
        aws s3 cp svc.csv.json.zip s3://code-deployment-package-3a/dev/etl-code/svc.csv.json.${{ variables.BUILD_BUILDID }}.zip
        aws lambda update-function-code --function-name dev-irn-${{ parameters.QA_CLIENT_NAME }}-csv-json --s3-bucket code-deployment-package-3a --s3-key dev/etl-code/svc.csv.json.${{ variables.BUILD_BUILDID }}.zip --publish --region us-east-1
      displayName: 'Deploy to QA'

  - job: Deploy_to_ALL_QA
    displayName: 'Deploying to all QA'
    condition: and(eq('${{ parameters.DEPLOY_PROD }}', 'YES'), eq('${{ parameters.QA_CLIENT_NAME }}', 'All'))
    steps:
    - script: |
        aws s3 cp svc.csv.json.zip s3://code-deployment-package-3a/dev/etl-code/svc.csv.json.${{ variables.BUILD_BUILDID }}.zip
        function_names=$(aws lambda list-functions --query 'Functions[*].FunctionName' --output text)
        for function_name in $function_names; do
          echo "Updating code for Lambda function: $function_name"
          aws lambda update-function-code --function-name "$function_name" --zip-file fileb://svc.csv.json.zip --publish --region us-east-1
        done
      displayName: 'Deploy to all QA'
